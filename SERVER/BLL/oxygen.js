const express = require('express');
const router = express.Router();
const oxygenDll = require('../DLL/oxygenDll');

const { addFilledOxyCylindersValidation } = require('../validation/oxygen/oxygen.validation');
const { addBlankOxyCylindersValidation } = require('../validation/oxygen/oxygen.validation');
const { getOrderDetailValidation } = require('../validation/oxygen/oxygen.validation');
const { addMiscellaneousDeliveryValidation } = require('../validation/oxygen/oxygen.validation');
const { exchangeRequestValidation } = require('../validation/oxygen/oxygen.validation');
const { deliverboydetailValidation } = require('../validation/oxygen/oxygen.validation');
const { deliverstaffDeleteValidation } = require('../validation/oxygen/oxygen.validation');
const { cylinderExchangeValidation } = require('../validation/oxygen/oxygen.validation');
const { addDeliverOrderValidation } = require('../validation/oxygen/oxygen.validation');
/**
 * @swagger
 * /oxygen/addFilledOxyCylinders:
 *  post:
 *    tags: [OXYGEN]
 *    description: Add filled cyliners to stock.
 *    parameters:
 *       - in: body
 *         name: oxygenSupplierId
 *         schema:
 *           type: string
 *         required: true
 *         description: Unique ID of the oxygen supplier, Which is generated by our system.
 *       - in: body
 *         name: cylinderType
 *         schema:
 *           type: string
 *         required: true
 *         description: Which type of cylinder
 *       - in: body
 *         name: quantity
 *         schema:
 *           type: integer
 *         required: true
 *         description: Quantity of cylinder
 *    responses: 
 *      '200':
 *        description: successfully added to stock.
 *      '401':
 *        description: Parmeter validation error.
 *      '501':
 *        description: Unexpected error.
 */
router.post("/addFilledOxyCylinders", addFilledOxyCylindersValidation, async (req, res) => {
    try {
        let result = await oxygenDll.addFilledOxyCylinders(req.body)
        res.send(result)
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `Unexpected error. ${e}`
        })
    }
});
/**
 * @swagger
 * /oxygen/addMiscellaneousDelivery:
 *  post:
 *    description: this API the order detail of a customer add to the database
 *    parameters:
 *       - in: body
 *         name: name
 *         schema:
 *           type: string
 *         required: true
 *         description: Customer name.
 *       - in: body
 *         name: cylinderType
 *         schema:
 *           type: string
 *         required: true
 *         description: Which type of cylinder.
 *       - in: body
 *         name: quantity
 *         schema:
 *           type: integer
 *         required: true
 *         description: no of cylinders
 *       - in: body
 *         name: accessories
 *         schema:
 *           type: string
 *         required: true
 *         description: if any accessories are delivered
 *       - in: body
 *         name: accQuantity
 *         schema:
 *           type: integer
 *         required: true
 *         description: Quantity of accessories delivered
 *       - in: body
 *         name: deliveredTo
 *         schema:
 *           type: string
 *         required: true
 *         description: Patient name
 *       - in: body
 *         name: referenceNo
 *         schema:
 *           type: string
 *         required: true
 *         description: Reference number of delivery
 *       - in: body
 *         name: mobileNo
 *         schema:
 *           type: integer
 *         required: true
 *         description: Mobile no. of patient
 *       - in: body
 *         name: address
 *         schema:
 *           type: string
 *         required: true
 *         description: Address of patient
 *       - in: body
 *         name: remark
 *         schema:
 *           type: string
 *         required: true
 *         description: Add remark
 * 
 *    responses: 
 *      '200':
 *        description: successfully added to stock.
 *      '401':
 *        description: Parmeter validation error.
 *      '501':
 *        description: Unexpected error.
 */

router.post('/addMiscellaneousDelivery', async (req, res) => {
    try {
        let result = await oxygenDll.addMiscellaneousDelivery(req.body)
        res.send(result);
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `${e}`
        })
    }
});
/**
 * @swagger
 * /oxygen/addBlankOxyCylinders:
 *  post:
 *    description: This will retrive data from the server
 *    parameters:
 *       - in: body
 *         name: cylinderType
 *         schema:
 *           type: string
 *         required: true
 *         description: Which type of cylinder
 *       - in: body
 *         name: quantity
 *         schema:
 *           type: integer
 *         required: true
 *         description: Quantity of cylinder
 *    responses: 
 *      '200':
 *        description: successfully added to stock.
 *      '401':
 *        description: Parmeter validation error.
 *      '501':
 *        description: Unexpected error.
 */
router.post("/addBlankOxyCylinders", addBlankOxyCylindersValidation, async (req, res) => {
    try {
        let result = await oxygenDll.addBlankOxyCylinders(req.body)
        res.send(result)
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `Unexpected error. ${e}`
        })
    }
});
/**
 * @swagger
 * /oxygen/getOxyCyStockList:
 *  get:
 *    description: This will retrive data from the server
 *    parameters:
 *       - in: query
 *         name: cylinderType
 *         schema:
 *           type: string
 *         required: true
 *         description: Which type of cylinder
 *    
 *         responses: 
 *           '200':
 *             description: details of cylinder display
 *             content:
 *               application/Json:
 *               schema:
 *                 type:object
 *               description: A specific details of oxygen cylinder.
 *           '401':
 *             description: Parmeter validation error.
 *           '501':
 *             description: Unexpected error.
 */


router.get('/getOxyCyStockList/:oxygenSupplierId', async (req, res) => {
    try {
        let result = await oxygenDll.getOxyCyStockList(req.params.oxygenSupplierId)
        res.send(result)
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `Unexpected error. ${e}`
        })
    }
});
/**
 * @swagger
 * /oxygen/getOrderList:
 *  get:
 *    description: This will retrive data from the server
 *    parameters:
 *       - in: params
 *         name: status
 *         schema:
 *           type: string
 *         required: true
 *         description: status of order
 *    
 *    responses: 
 *      '200':
 *        description: display the list of order details of a patient
 *        content:
 *          application/Json:
 *          schema:
 *            type:object
 *          description: order detail of a patient.
 *      '401':
 *        description: Parmeter validation error.
 *      '501':
 *        description: Unexpected error.
 */

router.get('/getOrderList', async (req, res) => {
    try {
        let result = await oxygenDll.getOrderList()
        res.send(result)
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `Unexpected error. ${e}`
        })
    }
});
/**
 * @swagger
 * /oxygen/getOrderDetail:
 *  get:
 *    description: This will retrive data from the server
 *    parameters:
 *       - in: params
 *         name: orderNo
 *         schema:
 *           type: string
 *         required: true
 *         description: unique order no.
 *    responses: 
 *       '200':
 *        description: display the list of order details of all oxygen cylinders
 *        content:
 *          application/Json:
 *          schema:
 *            type:object
 *          description: show order detail of oxygen cylinders ordered by a patient.
 *       '401':
 *        description: Parmeter validation error.
 *       '501':
 *        description: Unexpected error.
 */

router.get('/getOrderDetail', async (req, res) => {
    try {
        let result = await oxygenDll.getOrderDetail()
        res.send(result)
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `Unexpected error. ${e}`
        })
    }
});
/**
 * @swagger
 * /oxygen/getAvailableCylinders:
 *  get:
 *    description: This API will retrive stock list from the server.  
 *    responses:
 *      '200':
 *        description: get a list of cylinder data
 *        content:
 *          application/Json:
 *          schema:
 *              type:Array
 *          description: A list of cylinder details.
 *      '401':
 *        description: Parmeter validation error.
 *      '501':
 *        description: Unexpected error.
 */
router.get("/getAvailableCylinders", async (req, res) => {
    try {
        let result = await oxygenDll.getAvailableCylinders()
        res.send(result)
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `Unexpected error. ${e}`
        })
    }
});
/**
 * @swagger
 * /oxygen/cylinderExchange:
 *  put:
 *    description: This will retrive data from the server
 *    parameters:
 *       - in: params
 *         name: cylinderType
 *         schema:
 *           type: string
 *         required: true
 *         description: Which type of cylinder
 *       - in: body
 *         name: quantity
 *         schema:
 *           type: integer
 *         required: true
 *         description: Quantity of cylinder
 *    responses: 
 *      '200':
 *        description: successfully added to stock.
 *      '401':
 *        description: Parmeter validation error.
 *      '501':
 *        description: Unexpected error.
 */
router.put("/cylinderExchange/:cylinderType", async (req, res) => {
    try {
        let result = await oxygenDll.cylinderExchange(req.params)
        res.send(result)
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `Unexpected error. ${e}`
        })
    }
});
/**
 * @swagger
 * /oxygen/deliverboydetail:
 *  post:
 *    description: Add Deliveryboy details  to the server.
 *    parameters:
 *       - in: body
 *         name: deliveryboyName
 *         schema:
 *           type: string
 *         required: true
 *         description: Name of the deliveryboy.
 *       - in: body
 *         name: dateOfBirth
 *         schema:
 *           type: string
 *         required: true
 *         description: DOB of the deliveryboy.
 *       - in: body
 *         name: gender
 *         schema:
 *           type: string
 *         required: true
 *         description: Gender of the deliveryboy.
 *       - in: body
 *         name: licenceNo
 *         schema:
 *           type: string
 *         required: true
 *         description: Driving licence no. of the deliveryboy.
 *       - in: body
 *         name: mobile
 *         schema:
 *           type: number
 *         required: true
 *         description: Mobile no of the deliveryboy.
 *       - in: body
 *         name: address
 *         schema:
 *           type: string
 *         required: true
 *         description: Address of th deliveryboy.
 *    responses: 
 *      '200':
 *        description:DeliveryboyDetails added Successfully.
 *      '401':
 *        description: Parmeter validation error.
 *      '501':
 *        description: Unexpected error.
 */
// deliverboydetailValidation
router.post('/deliverboyDetail', async (req, res) => {
    try {
        let result = await oxygenDll.deliverboyDetail(req.body)
        res.send(result)
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `Unexpected error. ${e}`
        })
    }
});
router.put('/deliverboyDetailUpdate/:deliveryStaffId', async (req, res) => {
    try {
        let result = await oxygenDll.deliverboyDetailUpdate(req.params, req.body)
        res.send(result)
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `Unexpected error. ${e}`
        })
    }
});

//api10//exchangeRequest
/**
 * @swagger
 * /oxygen/exchangeRequest:
 *  get:
 *    description: This will retrive data from the server
 *    parameters:
 *       - in: params
 *         name: status
 *         schema:
 *           type: string
 *         required: true
 *         description: status of order
 *    
 *    responses: 
 *      '200':
 *        description: display the list of order details of a patient
 *        content:
 *          application/Json:
 *          schema:
 *            type:object
 *          description: order detail of a patient
 *      '401':
 *        description: Parmeter validation error.
 *      '501':
 *        description: Unexpected error.
 */

router.get('/getExchangeRequestList', async (req, res) => {
    try {
        let result = await oxygenDll.getExchangeRequestList(req.body)
        res.send(result)
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `Unexpected error. ${e}`
        })
    }
});
/**
 * @swagger
 * /oxygen/getdeliverystaffList:
 *  get:
 *    description: This will retrive data from the server
 *    parameters:
 *       - in: query
 *         name: Id
 *         schema:
 *           type: string
 *         required: true
 *         description: Which type of cylinder
 *    
 *         responses: 
 *           '200':
 *             description: details of cylinder display
 *             content:
 *               application/Json:
 *               schema:
 *                 type:object
 *               description: A specific details of oxygen cylinder.
 *           '401':
 *              description: Parmeter validation error.
 *           '501':
 *              description: Unexpected error.
 */


router.get('/getdeliverystaffList/:oxygenSupplierId', async (req, res) => {
    try {
        let result = await oxygenDll.getdeliverystaffList(req.params.oxygenSupplierId)
        res.send(result)
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `Unexpected error. ${e}`
        })
    }
});
/**
 * @swagger
 * /oxygen/deliverstaffDelete :
 *  delete:
 *    description: This will deleta data from the server
 *    parameters:
 *       - in: params
 *         name: Id
 *         schema:
 *           type: string
 *         required: true
 *         description: System generated id of the employee.
 *    responses: 
 *      '200':
 *        description: Deliveryboy Detail Deleted Successfully.
 *      '401':
 *        description: Parmeter validation error.
 *      '501':
 *        description: Unexpected error.
 */
router.delete("/deliverstaffDelete/:deliveryStaffId", async (req, res) => {
    try {
        let result = await oxygenDll.deliverstaffDelete(req.params.deliveryStaffId)
        res.send(result)
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `Unexpected error. ${e}`
        })
    }
});
/**
 * @swagger
 * /oxygen/addDeliverOrder:
 *  post:
 *    description: Add Deliver order details  to the server.
 *    parameters:
 *       - in: body
 *         name: patientName
 *         schema:
 *           type: string
 *         required: true
 *         description: Name of the patient.
 *       - in: body
 *         name: patientId
 *         schema:
 *           type: string
 *         required: true
 *         description: patient id of a patient.
 *       - in: body
 *         name: fatherName
 *         schema:
 *           type: string
 *         required: true
 *         description: father name of the patient.
 *       - in: body
 *         name: cylinderType
 *         schema:
 *           type: string
 *         required: true
 *         description: cylinder type of cylinder.
 *       - in: body
 *         name: quantity
 *         schema:
 *           type: number
 *         required: true
 *         description: quantity of cylinder .
 *       - in: body
 *         name: address
 *         schema:
 *           type: string
 *         required: true
 *         description: Address of the patient.
 *       - in: body
 *         name: mobileNo
 *         schema:
 *           type: number
 *         required: true
 *         description: Mobile no  of the patient.     
 *    responses: 
 *      '200':
 *        description:DeliveryboyDetails added Successfully.
 *      '401':
 *        description: Parmeter validation error.
 *      '501':
 *        description: Unexpected error.
 */
router.post('/addDeliverOrder', addDeliverOrderValidation, async (req, res) => {
    try {
        let result = await oxygenDll.addDeliverOrder(req.body)
        res.send(result)
    } catch(e) {
        res.status(501).json({
            success: 0,
            message: `Unexpected error. ${e}`
        })
    }
});


module.exports = router;